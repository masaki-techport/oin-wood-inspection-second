// let's imagine this file is autogenerated from the backend
// ideally, we want to keep these api related types in sync
// with the backend instead of manually writing them out

export type BaseEntity = {
  create_dt?: Date;
  update_dt?: Date;
};

export type Entity<T> = {
  [K in keyof T]: T[K];
} & BaseEntity;

export type Product = Entity<{
  product_no: string;
  product_name: string;
  file_path: string;
}>;

export type Inspection = Entity<{
  inspection_id: number;
  product_no: string;
  serial: string;
  inspection_dt: Date;
  inspection_result: number;
  file_path: string;
}>;

export type Datasets = Entity<{
  id: number;
  file_path: string;
  label: number;
}>;

export type ApiResult<T = never> = {
  result: boolean;
  message: string;
  total_count?: number;
  page_no?: number;
  page_size?: number;
} & (T extends never ? {} : { data: T });

export type InferenceResult = {
  total_detections: number;
  knot_counts: {
    [key: string]: number;
  };
  detections: Array<{
    class_id: number;
    class_name: string;
    confidence: number;
    bbox: number[];
  }>;
  result_image: string;
  config: {
    resolution: number;
    thresh: number;
  };
  debug?: {
    model_class_mapping: { [key: number]: string };
    app_class_mapping: { [key: number]: string };
    mapping_note: string;
  };
};

export type InspectionResult = {
  inspection_id: number;
  discoloration: boolean;
  hole: boolean;
  knot: boolean;
  dead_knot: boolean;
  live_knot: boolean;
  tight_knot: boolean;
  length: number;
  create_dt?: string;
  update_dt?: string;
};

export type InspectionDetailsImg = {
  error_id: number;         // 主キー
  inspection_id: number;    // 外部キー
  error_type: number;       // 
  error_type_name: string;
  x_position: number;
  y_position: number;
  width: number;
  height: number;
  confidence: number;
  image_no?: number;        // 画像番号
  image_path?: string;      // 画像パス
  create_dt?: string;
  update_dt?: string;
};